
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000097a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000906  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800100  00800100  0000097a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000009f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c60  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb4  00000000  00000000  000027f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f58  00000000  00000000  000034ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00004404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071d  00000000  00000000  00004664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000069a  00000000  00000000  00004d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000541b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 bb 02 	jmp	0x576	; 0x576 <__vector_20>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__vector_22>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  7c:	7b 03       	fmul	r23, r19
  7e:	7f 03       	fmul	r23, r23
  80:	83 03       	fmuls	r16, r19
  82:	87 03       	fmuls	r16, r23
  84:	8b 03       	fmulsu	r16, r19
  86:	8f 03       	fmulsu	r16, r23
  88:	93 03       	fmuls	r17, r19
  8a:	97 03       	fmuls	r17, r23
  8c:	9b 03       	fmulsu	r17, r19
  8e:	9f 03       	fmulsu	r17, r23
  90:	a3 03       	fmuls	r18, r19
  92:	a7 03       	fmuls	r18, r23

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a8 36       	cpi	r26, 0x68	; 104
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <main>
  b4:	0c 94 81 04 	jmp	0x902	; 0x902 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <Init_Board>:
#include "trinamic.h"

void Init_Board( void )
{
	// Nastavení RS485 Enable Interní
	sbi(DDRD, DDD2);
  bc:	52 9a       	sbi	0x0a, 2	; 10
	// UART0 RX
	cbi(DDRD, DDD0);
  be:	50 98       	cbi	0x0a, 0	; 10
	// UART0 TX
	sbi(DDRD, DDD1);
  c0:	51 9a       	sbi	0x0a, 1	; 10
	
	// LED0 Výstupní pin PB2
	sbi(DDRB, DDB2);
  c2:	22 9a       	sbi	0x04, 2	; 4
	// LED1 Výstupní pin PB3
	sbi(DDRB, DDB3);
  c4:	23 9a       	sbi	0x04, 3	; 4
	// LED2 Výstupní pin PB4
	sbi(DDRB, DDB4);
  c6:	24 9a       	sbi	0x04, 4	; 4
	
	LED0_OFF;
  c8:	2a 98       	cbi	0x05, 2	; 5
	LED1_OFF;
  ca:	2b 98       	cbi	0x05, 3	; 5
	LED2_OFF;
  cc:	2c 98       	cbi	0x05, 4	; 5
	
	// Povolení pøijmu dat
	RS485_EN_INT_receive;
  ce:	5a 98       	cbi	0x0b, 2	; 11
  d0:	08 95       	ret

000000d2 <simple_flag_null>:
uint8_t uart0_rx_iptr;


void simple_flag_null( void )
{
	if (citacka0 > 10000)
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  da:	81 31       	cpi	r24, 0x11	; 17
  dc:	97 42       	sbci	r25, 0x27	; 39
  de:	40 f0       	brcs	.+16     	; 0xf0 <simple_flag_null+0x1e>
	{
		// Vymaže každách 50ms flag interní èítaè
		uart0_rx_iptr=0;
  e0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <uart0_rx_iptr>
		uart0_rx_ptr=0;
  e4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <uart0_rx_ptr>
		citacka0=0;
  e8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  ec:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
	citacka0++;
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 102:	08 95       	ret

00000104 <TB_buf_fill_In>:
	TB_Buf_Out.b[5] = (uint8_t) (value >> 16);
	TB_Buf_Out.b[6] = (uint8_t) (value >> 8);
	TB_Buf_Out.b[7] = (uint8_t) (value >> 0);
	TB_calcSum();
	TB_Send_Com();
}
 104:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <uart0_rx_ptr>
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	e4 5e       	subi	r30, 0xE4	; 228
 10c:	fe 4f       	sbci	r31, 0xFE	; 254
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	21 91       	ld	r18, Z+
 114:	dc 01       	movw	r26, r24
 116:	a4 5e       	subi	r26, 0xE4	; 228
 118:	be 4f       	sbci	r27, 0xFE	; 254
 11a:	2c 93       	st	X, r18
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	89 30       	cpi	r24, 0x09	; 9
 120:	91 05       	cpc	r25, r1
 122:	b9 f7       	brne	.-18     	; 0x112 <TB_buf_fill_In+0xe>
 124:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <uart0_rx_ptr>
 128:	82 31       	cpi	r24, 0x12	; 18
 12a:	10 f0       	brcs	.+4      	; 0x130 <TB_buf_fill_In+0x2c>
 12c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <uart0_rx_ptr>
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	08 95       	ret

00000134 <TB_Send_Com>:
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <uart0_tx_flag>
 13a:	5a 9a       	sbi	0x0b, 2	; 11
 13c:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <uart0_tx_iptr>
 140:	8e 0f       	add	r24, r30
 142:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <uart0_tx_iptr>
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	e7 5b       	subi	r30, 0xB7	; 183
 14a:	fe 4f       	sbci	r31, 0xFE	; 254
 14c:	80 81       	ld	r24, Z
 14e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 152:	08 95       	ret

00000154 <TB_calcSum>:
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	fc 01       	movw	r30, r24
 15c:	e7 5b       	subi	r30, 0xB7	; 183
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	30 81       	ld	r19, Z
 162:	23 0f       	add	r18, r19
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	91 05       	cpc	r25, r1
 16a:	b9 f7       	brne	.-18     	; 0x15a <TB_calcSum+0x6>
 16c:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <TB_Buf_Out+0x8>
 170:	08 95       	ret

00000172 <TB_SendAck>:

void TB_SendAck(uint8_t status, uint32_t value)
{
	TB_Buf_Out.b[0] = TB_addr_Reply;
 172:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <TB_addr_Reply>
 176:	e9 e4       	ldi	r30, 0x49	; 73
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	90 83       	st	Z, r25
	TB_Buf_Out.b[1] = TB_addr_Module;
 17c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <TB_addr_Module>
 180:	91 83       	std	Z+1, r25	; 0x01
	TB_Buf_Out.b[2] = status;
 182:	82 83       	std	Z+2, r24	; 0x02
	TB_Buf_Out.b[3] = TB_Buf_In.b[TB_BUF_COMMAND];
 184:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <TB_Buf_In+0x1>
 188:	83 83       	std	Z+3, r24	; 0x03
	TB_Buf_Out.b[4] = (value >> 24);
 18a:	87 2f       	mov	r24, r23
 18c:	99 27       	eor	r25, r25
 18e:	aa 27       	eor	r26, r26
 190:	bb 27       	eor	r27, r27
 192:	84 83       	std	Z+4, r24	; 0x04
	TB_Buf_Out.b[5] = (value >> 16);
 194:	cb 01       	movw	r24, r22
 196:	aa 27       	eor	r26, r26
 198:	bb 27       	eor	r27, r27
 19a:	85 83       	std	Z+5, r24	; 0x05
	TB_Buf_Out.b[6] = (value >> 8);
 19c:	bb 27       	eor	r27, r27
 19e:	a7 2f       	mov	r26, r23
 1a0:	96 2f       	mov	r25, r22
 1a2:	85 2f       	mov	r24, r21
 1a4:	86 83       	std	Z+6, r24	; 0x06
	TB_Buf_Out.b[7] = (value >> 0);
 1a6:	47 83       	std	Z+7, r20	; 0x07
	TB_calcSum();
 1a8:	0e 94 aa 00 	call	0x154	; 0x154 <TB_calcSum>
	TB_Send_Com();
 1ac:	0e 94 9a 00 	call	0x134	; 0x134 <TB_Send_Com>
 1b0:	08 95       	ret

000001b2 <TB_Process>:


uint32_t TB_Value=0;

uint8_t TB_Process( void )
{
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
	uint8_t b=0;
	TB_Value =	(((int32_t) TB_Buf_In.b[4]) << 24) |
 1b8:	ec e1       	ldi	r30, 0x1C	; 28
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	24 81       	ldd	r18, Z+4	; 0x04
				(((int32_t) TB_Buf_In.b[5]) << 16) |
 1be:	45 81       	ldd	r20, Z+5	; 0x05
				(((int32_t) TB_Buf_In.b[6]) <<  8) |
 1c0:	86 81       	ldd	r24, Z+6	; 0x06
				(((int32_t) TB_Buf_In.b[7])      ) ;
 1c2:	97 81       	ldd	r25, Z+7	; 0x07

uint8_t TB_Process( void )
{
	uint8_t b=0;
	TB_Value =	(((int32_t) TB_Buf_In.b[4]) << 24) |
				(((int32_t) TB_Buf_In.b[5]) << 16) |
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	ba 01       	movw	r22, r20
 1cc:	55 27       	eor	r21, r21
 1ce:	44 27       	eor	r20, r20
uint32_t TB_Value=0;

uint8_t TB_Process( void )
{
	uint8_t b=0;
	TB_Value =	(((int32_t) TB_Buf_In.b[4]) << 24) |
 1d0:	72 2b       	or	r23, r18
 1d2:	49 2b       	or	r20, r25
				(((int32_t) TB_Buf_In.b[5]) << 16) |
				(((int32_t) TB_Buf_In.b[6]) <<  8) |
 1d4:	58 2b       	or	r21, r24
uint32_t TB_Value=0;

uint8_t TB_Process( void )
{
	uint8_t b=0;
	TB_Value =	(((int32_t) TB_Buf_In.b[4]) << 24) |
 1d6:	db 01       	movw	r26, r22
 1d8:	ca 01       	movw	r24, r20
 1da:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <TB_Value>
 1de:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <TB_Value+0x1>
 1e2:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <TB_Value+0x2>
 1e6:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <TB_Value+0x3>
				(((int32_t) TB_Buf_In.b[5]) << 16) |
				(((int32_t) TB_Buf_In.b[6]) <<  8) |
				(((int32_t) TB_Buf_In.b[7])      ) ;
	switch(TB_Buf_In.b[TB_BUF_COMMAND])
 1ea:	c1 81       	ldd	r28, Z+1	; 0x01
 1ec:	c0 31       	cpi	r28, 0x10	; 16
 1ee:	48 f4       	brcc	.+18     	; 0x202 <TB_Process+0x50>
 1f0:	ce 30       	cpi	r28, 0x0E	; 14
 1f2:	08 f0       	brcs	.+2      	; 0x1f6 <TB_Process+0x44>
 1f4:	22 c1       	rjmp	.+580    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 1f6:	c9 30       	cpi	r28, 0x09	; 9
 1f8:	41 f0       	breq	.+16     	; 0x20a <TB_Process+0x58>
 1fa:	ca 30       	cpi	r28, 0x0A	; 10
 1fc:	09 f4       	brne	.+2      	; 0x200 <TB_Process+0x4e>
 1fe:	99 c0       	rjmp	.+306    	; 0x332 <TB_Process+0x180>
 200:	13 c1       	rjmp	.+550    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 202:	c8 38       	cpi	r28, 0x88	; 136
 204:	09 f4       	brne	.+2      	; 0x208 <TB_Process+0x56>
 206:	dd c0       	rjmp	.+442    	; 0x3c2 <TB_Process+0x210>
 208:	0f c1       	rjmp	.+542    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			break;
		case TB_CMD_GIO:
			return TB_CMD_GIO;
			break;
		case TB_CMD_SGP:
			if (TB_Buf_In.b[TB_BUF_MOTOR] != 0)
 20a:	c0 91 1f 01 	lds	r28, 0x011F	; 0x80011f <TB_Buf_In+0x3>
 20e:	cc 23       	and	r28, r28
 210:	51 f0       	breq	.+20     	; 0x226 <TB_Process+0x74>
			{
				TB_SendAck(TB_ERR_MOTOR, TB_Buf_In.b[TB_BUF_MOTOR]); // invalid value
 212:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <TB_Buf_In+0x3>
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	87 e0       	ldi	r24, 0x07	; 7
 21e:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
			return 0;
	}
	
	return 0;
 222:	c0 e0       	ldi	r28, 0x00	; 0
 224:	0a c1       	rjmp	.+532    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			{
				TB_SendAck(TB_ERR_MOTOR, TB_Buf_In.b[TB_BUF_MOTOR]); // invalid value
			}
			else
			{
				switch (TB_Buf_In.b[TB_BUF_TYPE])
 226:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <TB_Buf_In+0x2>
 22a:	21 34       	cpi	r18, 0x41	; 65
 22c:	39 f1       	breq	.+78     	; 0x27c <TB_Process+0xca>
 22e:	18 f4       	brcc	.+6      	; 0x236 <TB_Process+0x84>
 230:	20 34       	cpi	r18, 0x40	; 64
 232:	39 f0       	breq	.+14     	; 0x242 <TB_Process+0x90>
 234:	7a c0       	rjmp	.+244    	; 0x32a <TB_Process+0x178>
 236:	22 34       	cpi	r18, 0x42	; 66
 238:	f1 f1       	breq	.+124    	; 0x2b6 <TB_Process+0x104>
 23a:	2c 34       	cpi	r18, 0x4C	; 76
 23c:	09 f4       	brne	.+2      	; 0x240 <TB_Process+0x8e>
 23e:	58 c0       	rjmp	.+176    	; 0x2f0 <TB_Process+0x13e>
 240:	74 c0       	rjmp	.+232    	; 0x32a <TB_Process+0x178>
				{
					case TB_GBPARAM_EEMAGIC:
						if (TB_Value != TB_gbparam.eemagic)
 242:	00 91 16 01 	lds	r16, 0x0116	; 0x800116 <TB_gbparam>
 246:	10 e0       	ldi	r17, 0x00	; 0
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	80 17       	cp	r24, r16
 24e:	91 07       	cpc	r25, r17
 250:	a2 07       	cpc	r26, r18
 252:	b3 07       	cpc	r27, r19
 254:	39 f0       	breq	.+14     	; 0x264 <TB_Process+0xb2>
						{
							TB_gbparam.eemagic = TB_Value;
 256:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <TB_gbparam>
							b = (void *) &(TB_gbparam.eemagic) - (void *) &(TB_gbparam);
							eeprom_update_byte( (uint8_t * ) (b+EEPROM_START_ADDRESS), TB_gbparam.eemagic);
 25a:	64 2f       	mov	r22, r20
 25c:	80 e1       	ldi	r24, 0x10	; 16
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 57 04 	call	0x8ae	; 0x8ae <eeprom_update_byte>
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
 264:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <TB_Value>
 268:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <TB_Value+0x1>
 26c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <TB_Value+0x2>
 270:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <TB_Value+0x3>
 274:	85 e6       	ldi	r24, 0x65	; 101
 276:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
						break;
 27a:	df c0       	rjmp	.+446    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
					case TB_GBPARAM_BAUD:
						if (TB_Value != TB_gbparam.baud)
 27c:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <TB_gbparam+0x1>
 280:	10 e0       	ldi	r17, 0x00	; 0
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	80 17       	cp	r24, r16
 288:	91 07       	cpc	r25, r17
 28a:	a2 07       	cpc	r26, r18
 28c:	b3 07       	cpc	r27, r19
 28e:	39 f0       	breq	.+14     	; 0x29e <TB_Process+0xec>
						{
							TB_gbparam.baud = TB_Value;
 290:	40 93 17 01 	sts	0x0117, r20	; 0x800117 <TB_gbparam+0x1>
							b = (void *) &(TB_gbparam.baud) - (void *) &(TB_gbparam);
							eeprom_update_byte( (uint8_t * ) (b+EEPROM_START_ADDRESS), TB_gbparam.baud);
 294:	64 2f       	mov	r22, r20
 296:	81 e1       	ldi	r24, 0x11	; 17
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 57 04 	call	0x8ae	; 0x8ae <eeprom_update_byte>
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
 29e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <TB_Value>
 2a2:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <TB_Value+0x1>
 2a6:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <TB_Value+0x2>
 2aa:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <TB_Value+0x3>
 2ae:	85 e6       	ldi	r24, 0x65	; 101
 2b0:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
						break;
 2b4:	c2 c0       	rjmp	.+388    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
					case TB_GBPARAM_ADDRESS:
						if (TB_Value != TB_gbparam.address)
 2b6:	00 91 18 01 	lds	r16, 0x0118	; 0x800118 <TB_gbparam+0x2>
 2ba:	10 e0       	ldi	r17, 0x00	; 0
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	80 17       	cp	r24, r16
 2c2:	91 07       	cpc	r25, r17
 2c4:	a2 07       	cpc	r26, r18
 2c6:	b3 07       	cpc	r27, r19
 2c8:	39 f0       	breq	.+14     	; 0x2d8 <TB_Process+0x126>
						{
							TB_gbparam.address = TB_Value;
 2ca:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <TB_gbparam+0x2>
							b = (void *) &(TB_gbparam.address) - (void *) &(TB_gbparam);
							eeprom_update_byte( (uint8_t * ) (b+EEPROM_START_ADDRESS), TB_gbparam.address);
 2ce:	64 2f       	mov	r22, r20
 2d0:	82 e1       	ldi	r24, 0x12	; 18
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 57 04 	call	0x8ae	; 0x8ae <eeprom_update_byte>
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
 2d8:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <TB_Value>
 2dc:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <TB_Value+0x1>
 2e0:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <TB_Value+0x2>
 2e4:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <TB_Value+0x3>
 2e8:	85 e6       	ldi	r24, 0x65	; 101
 2ea:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
						break;
 2ee:	a5 c0       	rjmp	.+330    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
					case TB_GBPARAM_HOST_ADDR:
						if (TB_Value != TB_gbparam.host_address)
 2f0:	00 91 1a 01 	lds	r16, 0x011A	; 0x80011a <TB_gbparam+0x4>
 2f4:	10 e0       	ldi	r17, 0x00	; 0
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	80 17       	cp	r24, r16
 2fc:	91 07       	cpc	r25, r17
 2fe:	a2 07       	cpc	r26, r18
 300:	b3 07       	cpc	r27, r19
 302:	39 f0       	breq	.+14     	; 0x312 <TB_Process+0x160>
						{
							TB_gbparam.host_address = TB_Value;
 304:	40 93 1a 01 	sts	0x011A, r20	; 0x80011a <TB_gbparam+0x4>
							b = (void *) &(TB_gbparam.host_address) - (void *) &(TB_gbparam);
							eeprom_update_byte( (uint8_t * ) (b+EEPROM_START_ADDRESS), TB_gbparam.host_address);
 308:	64 2f       	mov	r22, r20
 30a:	84 e1       	ldi	r24, 0x14	; 20
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 57 04 	call	0x8ae	; 0x8ae <eeprom_update_byte>
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
 312:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <TB_Value>
 316:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <TB_Value+0x1>
 31a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <TB_Value+0x2>
 31e:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <TB_Value+0x3>
 322:	85 e6       	ldi	r24, 0x65	; 101
 324:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
						break;
 328:	88 c0       	rjmp	.+272    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
					default:
						TB_SendAck(TB_ERR_TYPE, TB_Value); // invalid value
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
						break;
 330:	84 c0       	rjmp	.+264    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
				}
			}
			break;
		case TB_CMD_GGP:
			if (TB_Buf_In.b[TB_BUF_MOTOR] != 0)
 332:	c0 91 1f 01 	lds	r28, 0x011F	; 0x80011f <TB_Buf_In+0x3>
 336:	cc 23       	and	r28, r28
 338:	51 f0       	breq	.+20     	; 0x34e <TB_Process+0x19c>
			{
				TB_SendAck(TB_ERR_MOTOR, TB_Buf_In.b[TB_BUF_MOTOR]); // invalid value
 33a:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <TB_Buf_In+0x3>
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	87 e0       	ldi	r24, 0x07	; 7
 346:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
			return 0;
	}
	
	return 0;
 34a:	c0 e0       	ldi	r28, 0x00	; 0
 34c:	76 c0       	rjmp	.+236    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			{
				TB_SendAck(TB_ERR_MOTOR, TB_Buf_In.b[TB_BUF_MOTOR]); // invalid value
			}
			else
			{
				switch (TB_Buf_In.b[TB_BUF_TYPE])
 34e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <TB_Buf_In+0x2>
 352:	81 34       	cpi	r24, 0x41	; 65
 354:	49 f0       	breq	.+18     	; 0x368 <TB_Process+0x1b6>
 356:	18 f4       	brcc	.+6      	; 0x35e <TB_Process+0x1ac>
 358:	80 34       	cpi	r24, 0x40	; 64
 35a:	09 f1       	breq	.+66     	; 0x39e <TB_Process+0x1ec>
 35c:	29 c0       	rjmp	.+82     	; 0x3b0 <TB_Process+0x1fe>
 35e:	82 34       	cpi	r24, 0x42	; 66
 360:	61 f0       	breq	.+24     	; 0x37a <TB_Process+0x1c8>
 362:	8c 34       	cpi	r24, 0x4C	; 76
 364:	99 f0       	breq	.+38     	; 0x38c <TB_Process+0x1da>
 366:	24 c0       	rjmp	.+72     	; 0x3b0 <TB_Process+0x1fe>
				{
					case TB_GBPARAM_BAUD:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam.baud);
 368:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <TB_gbparam+0x1>
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	85 e6       	ldi	r24, 0x65	; 101
 374:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
						break;
 378:	60 c0       	rjmp	.+192    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
					case TB_GBPARAM_ADDRESS:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam.address);
 37a:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <TB_gbparam+0x2>
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	85 e6       	ldi	r24, 0x65	; 101
 386:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
						break;
 38a:	57 c0       	rjmp	.+174    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
					case TB_GBPARAM_HOST_ADDR:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam.host_address);
 38c:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <TB_gbparam+0x4>
 390:	50 e0       	ldi	r21, 0x00	; 0
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	85 e6       	ldi	r24, 0x65	; 101
 398:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
						break;
 39c:	4e c0       	rjmp	.+156    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
					case TB_GBPARAM_EEMAGIC:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam.eemagic);
 39e:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <TB_gbparam>
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	85 e6       	ldi	r24, 0x65	; 101
 3aa:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
						break;
 3ae:	45 c0       	rjmp	.+138    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
					default:
						TB_SendAck(TB_ERR_TYPE, TB_Buf_In.b[TB_BUF_TYPE]); // invalid value
 3b0:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <TB_Buf_In+0x2>
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
						break;
 3c0:	3c c0       	rjmp	.+120    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
				}
			}
			break;
		case 136: // get module version
			if (TB_Buf_In.b[TB_BUF_TYPE] == 0)
 3c2:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <TB_Buf_In+0x2>
 3c6:	c1 11       	cpse	r28, r1
 3c8:	19 c0       	rjmp	.+50     	; 0x3fc <TB_Process+0x24a>
			{
				// text mode
				TB_Buf_Out.b[0] = TB_addr_Reply;					// Standartnì adresa 2
 3ca:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <TB_addr_Reply>
 3ce:	e9 e4       	ldi	r30, 0x49	; 73
 3d0:	f1 e0       	ldi	r31, 0x01	; 1
 3d2:	80 83       	st	Z, r24
				TB_Buf_Out.b[1] = MODULE_ADDRESS;					// Jaká adresa modulu
 3d4:	85 e6       	ldi	r24, 0x65	; 101
 3d6:	81 83       	std	Z+1, r24	; 0x01
				TB_Buf_Out.b[2] = MODULE_TYPE;								// Jaký modul odpovídá
 3d8:	88 ec       	ldi	r24, 0xC8	; 200
 3da:	82 83       	std	Z+2, r24	; 0x02
				TB_Buf_Out.b[3] = TB_Buf_In.b[TB_BUF_COMMAND];		//
 3dc:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <TB_Buf_In+0x1>
 3e0:	83 83       	std	Z+3, r24	; 0x03
				TB_Buf_Out.b[4] = 'V';								// Verze softwaru.
 3e2:	86 e5       	ldi	r24, 0x56	; 86
 3e4:	84 83       	std	Z+4, r24	; 0x04
				TB_Buf_Out.b[5] = '1';
 3e6:	81 e3       	ldi	r24, 0x31	; 49
 3e8:	85 83       	std	Z+5, r24	; 0x05
				TB_Buf_Out.b[6] = '.';
 3ea:	8e e2       	ldi	r24, 0x2E	; 46
 3ec:	86 83       	std	Z+6, r24	; 0x06
				TB_Buf_Out.b[7] = '0';
 3ee:	80 e3       	ldi	r24, 0x30	; 48
 3f0:	87 83       	std	Z+7, r24	; 0x07
				TB_calcSum();
 3f2:	0e 94 aa 00 	call	0x154	; 0x154 <TB_calcSum>
				TB_Send_Com();
 3f6:	0e 94 9a 00 	call	0x134	; 0x134 <TB_Send_Com>
 3fa:	1f c0       	rjmp	.+62     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			}
			else if (TB_Buf_In.b[TB_BUF_TYPE] == 0)
 3fc:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <TB_Buf_In+0x2>
 400:	c1 11       	cpse	r28, r1
 402:	08 c0       	rjmp	.+16     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			{
				// binary mode
				TB_SendAck(TB_ERR_OK, (0x10203040));
 404:	40 e4       	ldi	r20, 0x40	; 64
 406:	50 e3       	ldi	r21, 0x30	; 48
 408:	60 e2       	ldi	r22, 0x20	; 32
 40a:	70 e1       	ldi	r23, 0x10	; 16
 40c:	84 e6       	ldi	r24, 0x64	; 100
 40e:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
 412:	13 c0       	rjmp	.+38     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			}
			else
			{
				TB_SendAck(TB_ERR_TYPE, TB_Buf_In.b[TB_BUF_TYPE]);
 414:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <TB_Buf_In+0x2>
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	83 e0       	ldi	r24, 0x03	; 3
 420:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
			return 0;
	}
	
	return 0;
 424:	c0 e0       	ldi	r28, 0x00	; 0
 426:	09 c0       	rjmp	.+18     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			{
				TB_SendAck(TB_ERR_TYPE, TB_Buf_In.b[TB_BUF_TYPE]);
			}
			break;
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
 428:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <TB_Buf_In+0x1>
 42c:	50 e0       	ldi	r21, 0x00	; 0
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
			return 0;
 438:	c0 e0       	ldi	r28, 0x00	; 0
	}
	
	return 0;
}
 43a:	8c 2f       	mov	r24, r28
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	08 95       	ret

00000444 <TB_Init>:
}

void TB_Init( void )
{
	//  DST,   SRC, size
	eeprom_read_block((void *) &TB_gbparam, (const void *) EEPROM_START_ADDRESS, sizeof(struct TB_GBPARAM));
 444:	45 e0       	ldi	r20, 0x05	; 5
 446:	50 e0       	ldi	r21, 0x00	; 0
 448:	60 e1       	ldi	r22, 0x10	; 16
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	86 e1       	ldi	r24, 0x16	; 22
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	0e 94 47 04 	call	0x88e	; 0x88e <eeprom_read_block>
	if (TB_gbparam.eemagic != 66)
 454:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <TB_gbparam>
 458:	82 34       	cpi	r24, 0x42	; 66
 45a:	91 f0       	breq	.+36     	; 0x480 <TB_Init+0x3c>
	{
		// not valid data in eeprom
		TB_gbparam.eemagic = 66;
 45c:	e6 e1       	ldi	r30, 0x16	; 22
 45e:	f1 e0       	ldi	r31, 0x01	; 1
 460:	82 e4       	ldi	r24, 0x42	; 66
 462:	80 83       	st	Z, r24
		TB_gbparam.baud = 0;
 464:	11 82       	std	Z+1, r1	; 0x01
		TB_gbparam.address = MODULE_ADDRESS;
 466:	85 e6       	ldi	r24, 0x65	; 101
 468:	82 83       	std	Z+2, r24	; 0x02
		TB_gbparam.telegram_pause_time = 0;
 46a:	13 82       	std	Z+3, r1	; 0x03
		TB_gbparam.host_address = 2;
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	84 83       	std	Z+4, r24	; 0x04
		// save default setting to eeprom
		eeprom_write_block((void *) &TB_gbparam, (void *) EEPROM_START_ADDRESS, sizeof(struct TB_GBPARAM));
 470:	45 e0       	ldi	r20, 0x05	; 5
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	60 e1       	ldi	r22, 0x10	; 16
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	cf 01       	movw	r24, r30
 47a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <eeprom_write_block>
 47e:	04 c0       	rjmp	.+8      	; 0x488 <TB_Init+0x44>
	}
	else
	{
		// zvolíme správnou komunikaèní rychlost:
		uart0_set_baud(TB_gbparam.baud);
 480:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <TB_gbparam+0x1>
 484:	0e 94 72 03 	call	0x6e4	; 0x6e4 <uart0_set_baud>
	}
	// poznaèíme si adresy
	TB_addr_Reply = TB_gbparam.host_address;
 488:	e6 e1       	ldi	r30, 0x16	; 22
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	84 81       	ldd	r24, Z+4	; 0x04
 48e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <TB_addr_Reply>
	TB_addr_Module = TB_gbparam.address;
 492:	82 81       	ldd	r24, Z+2	; 0x02
 494:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <TB_addr_Module>
 498:	08 95       	ret

0000049a <uart0_init>:


void uart0_transmit_char(uint8_t data)
{
	while ( !( UART0_UCSRA & (1 << UART0_UDRE)) );
	UART0_UDR = data;
 49a:	cf 92       	push	r12
 49c:	df 92       	push	r13
 49e:	ef 92       	push	r14
 4a0:	ff 92       	push	r15
 4a2:	6b 01       	movw	r12, r22
 4a4:	7c 01       	movw	r14, r24
 4a6:	cc 0c       	add	r12, r12
 4a8:	dd 1c       	adc	r13, r13
 4aa:	ee 1c       	adc	r14, r14
 4ac:	ff 1c       	adc	r15, r15
 4ae:	cc 0c       	add	r12, r12
 4b0:	dd 1c       	adc	r13, r13
 4b2:	ee 1c       	adc	r14, r14
 4b4:	ff 1c       	adc	r15, r15
 4b6:	cc 0c       	add	r12, r12
 4b8:	dd 1c       	adc	r13, r13
 4ba:	ee 1c       	adc	r14, r14
 4bc:	ff 1c       	adc	r15, r15
 4be:	a7 01       	movw	r20, r14
 4c0:	96 01       	movw	r18, r12
 4c2:	22 0f       	add	r18, r18
 4c4:	33 1f       	adc	r19, r19
 4c6:	44 1f       	adc	r20, r20
 4c8:	55 1f       	adc	r21, r21
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	81 ee       	ldi	r24, 0xE1	; 225
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 1f 04 	call	0x83e	; 0x83e <__udivmodsi4>
 4d6:	21 50       	subi	r18, 0x01	; 1
 4d8:	31 09       	sbc	r19, r1
 4da:	41 e0       	ldi	r20, 0x01	; 1
 4dc:	50 e0       	ldi	r21, 0x00	; 0
 4de:	c6 16       	cp	r12, r22
 4e0:	d7 06       	cpc	r13, r23
 4e2:	e8 06       	cpc	r14, r24
 4e4:	f9 06       	cpc	r15, r25
 4e6:	10 f0       	brcs	.+4      	; 0x4ec <uart0_init+0x52>
 4e8:	40 e0       	ldi	r20, 0x00	; 0
 4ea:	50 e0       	ldi	r21, 0x00	; 0
 4ec:	24 0f       	add	r18, r20
 4ee:	35 1f       	adc	r19, r21
 4f0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 4f4:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 4f8:	e1 ec       	ldi	r30, 0xC1	; 193
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	88 61       	ori	r24, 0x18	; 24
 500:	80 83       	st	Z, r24
 502:	e2 ec       	ldi	r30, 0xC2	; 194
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	86 60       	ori	r24, 0x06	; 6
 50a:	80 83       	st	Z, r24
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	ff 90       	pop	r15
 510:	ef 90       	pop	r14
 512:	df 90       	pop	r13
 514:	cf 90       	pop	r12
 516:	08 95       	ret

00000518 <uart0_interrupt_rx>:
 518:	88 23       	and	r24, r24
 51a:	31 f0       	breq	.+12     	; 0x528 <uart0_interrupt_rx+0x10>
 51c:	e1 ec       	ldi	r30, 0xC1	; 193
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	80 68       	ori	r24, 0x80	; 128
 524:	80 83       	st	Z, r24
 526:	05 c0       	rjmp	.+10     	; 0x532 <uart0_interrupt_rx+0x1a>
 528:	e1 ec       	ldi	r30, 0xC1	; 193
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	80 78       	andi	r24, 0x80	; 128
 530:	80 83       	st	Z, r24
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	08 95       	ret

00000536 <uart0_interrupt_tx>:
 536:	88 23       	and	r24, r24
 538:	31 f0       	breq	.+12     	; 0x546 <uart0_interrupt_tx+0x10>
 53a:	e1 ec       	ldi	r30, 0xC1	; 193
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	80 64       	ori	r24, 0x40	; 64
 542:	80 83       	st	Z, r24
 544:	05 c0       	rjmp	.+10     	; 0x550 <uart0_interrupt_tx+0x1a>
 546:	e1 ec       	ldi	r30, 0xC1	; 193
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	80 74       	andi	r24, 0x40	; 64
 54e:	80 83       	st	Z, r24
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	08 95       	ret

00000554 <uart0_receive_char>:
 554:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <uart0_rx_ptr>
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	eb 5d       	subi	r30, 0xDB	; 219
 55c:	fe 4f       	sbci	r31, 0xFE	; 254
 55e:	80 83       	st	Z, r24
 560:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <uart0_rx_ptr>
 564:	8f 5f       	subi	r24, 0xFF	; 255
 566:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <uart0_rx_ptr>
 56a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <uart0_rx_iptr>
 56e:	8f 5f       	subi	r24, 0xFF	; 255
 570:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <uart0_rx_iptr>
 574:	08 95       	ret

00000576 <__vector_20>:
 576:	1f 92       	push	r1
 578:	0f 92       	push	r0
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	0f 92       	push	r0
 57e:	11 24       	eor	r1, r1
 580:	2f 93       	push	r18
 582:	3f 93       	push	r19
 584:	4f 93       	push	r20
 586:	5f 93       	push	r21
 588:	6f 93       	push	r22
 58a:	7f 93       	push	r23
 58c:	8f 93       	push	r24
 58e:	9f 93       	push	r25
 590:	af 93       	push	r26
 592:	bf 93       	push	r27
 594:	ef 93       	push	r30
 596:	ff 93       	push	r31
 598:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 59c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 5a0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5a4:	e4 e6       	ldi	r30, 0x64	; 100
 5a6:	f1 e0       	ldi	r31, 0x01	; 1
 5a8:	80 83       	st	Z, r24
 5aa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 5ae:	91 83       	std	Z+1, r25	; 0x01
 5b0:	95 e0       	ldi	r25, 0x05	; 5
 5b2:	92 83       	std	Z+2, r25	; 0x02
 5b4:	0e 94 aa 02 	call	0x554	; 0x554 <uart0_receive_char>
 5b8:	ff 91       	pop	r31
 5ba:	ef 91       	pop	r30
 5bc:	bf 91       	pop	r27
 5be:	af 91       	pop	r26
 5c0:	9f 91       	pop	r25
 5c2:	8f 91       	pop	r24
 5c4:	7f 91       	pop	r23
 5c6:	6f 91       	pop	r22
 5c8:	5f 91       	pop	r21
 5ca:	4f 91       	pop	r20
 5cc:	3f 91       	pop	r19
 5ce:	2f 91       	pop	r18
 5d0:	0f 90       	pop	r0
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	0f 90       	pop	r0
 5d6:	1f 90       	pop	r1
 5d8:	18 95       	reti

000005da <__vector_22>:
 5da:	1f 92       	push	r1
 5dc:	0f 92       	push	r0
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	0f 92       	push	r0
 5e2:	11 24       	eor	r1, r1
 5e4:	8f 93       	push	r24
 5e6:	ef 93       	push	r30
 5e8:	ff 93       	push	r31
 5ea:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <uart0_tx_flag>
 5ee:	88 23       	and	r24, r24
 5f0:	d9 f0       	breq	.+54     	; 0x628 <__vector_22+0x4e>
 5f2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <uart0_tx_iptr>
 5f6:	89 30       	cpi	r24, 0x09	; 9
 5f8:	30 f0       	brcs	.+12     	; 0x606 <__vector_22+0x2c>
 5fa:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <uart0_tx_flag>
 5fe:	5a 98       	cbi	0x0b, 2	; 11
 600:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <uart0_tx_iptr>
 604:	0d c0       	rjmp	.+26     	; 0x620 <__vector_22+0x46>
 606:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <uart0_tx_iptr>
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	e7 5b       	subi	r30, 0xB7	; 183
 60e:	fe 4f       	sbci	r31, 0xFE	; 254
 610:	80 81       	ld	r24, Z
 612:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 616:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <uart0_tx_iptr>
 61a:	8f 5f       	subi	r24, 0xFF	; 255
 61c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <uart0_tx_iptr>
 620:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <uart0_rx_iptr>
 624:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <uart0_rx_ptr>
 628:	ff 91       	pop	r31
 62a:	ef 91       	pop	r30
 62c:	8f 91       	pop	r24
 62e:	0f 90       	pop	r0
 630:	0f be       	out	0x3f, r0	; 63
 632:	0f 90       	pop	r0
 634:	1f 90       	pop	r1
 636:	18 95       	reti

00000638 <check_uart0>:
 638:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <uart0_rx_iptr>
 63c:	89 30       	cpi	r24, 0x09	; 9
 63e:	18 f0       	brcs	.+6      	; 0x646 <check_uart0+0xe>
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <uart0_rx_flag>
 646:	f8 94       	cli
 648:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <uart0_rx_flag>
 64c:	88 23       	and	r24, r24
 64e:	09 f4       	brne	.+2      	; 0x652 <check_uart0+0x1a>
 650:	41 c0       	rjmp	.+130    	; 0x6d4 <check_uart0+0x9c>
 652:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <uart0_sum>
 656:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <uart0_i>
 65a:	89 e0       	ldi	r24, 0x09	; 9
 65c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <uart0_i>
 660:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <uart0_i>
 664:	82 30       	cpi	r24, 0x02	; 2
 666:	c0 f0       	brcs	.+48     	; 0x698 <check_uart0+0x60>
 668:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <uart0_rx_ptr>
 66c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <uart0_i>
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	e8 1b       	sub	r30, r24
 674:	f1 09       	sbc	r31, r1
 676:	eb 5d       	subi	r30, 0xDB	; 219
 678:	fe 4f       	sbci	r31, 0xFE	; 254
 67a:	90 81       	ld	r25, Z
 67c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <uart0_sum>
 680:	89 0f       	add	r24, r25
 682:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <uart0_sum>
 686:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <uart0_i>
 68a:	81 50       	subi	r24, 0x01	; 1
 68c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <uart0_i>
 690:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <uart0_i>
 694:	82 30       	cpi	r24, 0x02	; 2
 696:	40 f7       	brcc	.-48     	; 0x668 <check_uart0+0x30>
 698:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <uart0_rx_ptr>
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	ec 5d       	subi	r30, 0xDC	; 220
 6a0:	fe 4f       	sbci	r31, 0xFE	; 254
 6a2:	80 81       	ld	r24, Z
 6a4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <uart0_check_sum>
 6a8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <uart0_sum>
 6ac:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <uart0_check_sum>
 6b0:	98 13       	cpse	r25, r24
 6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <check_uart0+0x88>
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <uart0_ret>
 6ba:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <uart0_rx_iptr>
 6be:	07 c0       	rjmp	.+14     	; 0x6ce <check_uart0+0x96>
 6c0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <uart0_rx_iptr>
 6c4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <uart0_rx_ptr>
 6c8:	82 e0       	ldi	r24, 0x02	; 2
 6ca:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <uart0_ret>
 6ce:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <uart0_check_sum>
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <check_uart0+0xa0>
 6d4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <uart0_ret>
 6d8:	78 94       	sei
 6da:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <uart0_rx_flag>
 6de:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <uart0_ret>
 6e2:	08 95       	ret

000006e4 <uart0_set_baud>:
#define MACRO_BAUDRATE(BAUDRATE) (UART0_UBRRL = (((F_CPU) / (BAUDRATE * 16UL)) - 1 + (F_CPU % (BAUDRATE * 16UL) > (BAUDRATE * 8UL) ? 1 : 0)))

void uart0_set_baud(uint8_t baud)
{
	// UART port
	switch (baud) {
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	8c 30       	cpi	r24, 0x0C	; 12
 6e8:	91 05       	cpc	r25, r1
 6ea:	a0 f5       	brcc	.+104    	; 0x754 <uart0_set_baud+0x70>
 6ec:	fc 01       	movw	r30, r24
 6ee:	e2 5c       	subi	r30, 0xC2	; 194
 6f0:	ff 4f       	sbci	r31, 0xFF	; 255
 6f2:	0c 94 41 04 	jmp	0x882	; 0x882 <__tablejump2__>
		case 0:
			MACRO_BAUDRATE(9600);
 6f6:	8f e5       	ldi	r24, 0x5F	; 95
 6f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 6fc:	08 95       	ret
		case 1:
			MACRO_BAUDRATE(14400);
 6fe:	8f e3       	ldi	r24, 0x3F	; 63
 700:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 704:	08 95       	ret
		case 2:
			MACRO_BAUDRATE(19200);
 706:	8f e2       	ldi	r24, 0x2F	; 47
 708:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 70c:	08 95       	ret
		case 3:
			MACRO_BAUDRATE(28800);
 70e:	8f e1       	ldi	r24, 0x1F	; 31
 710:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 714:	08 95       	ret
		case 4:
			MACRO_BAUDRATE(38400);
 716:	87 e1       	ldi	r24, 0x17	; 23
 718:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 71c:	08 95       	ret
		case 5:
			MACRO_BAUDRATE(57600);
 71e:	8f e0       	ldi	r24, 0x0F	; 15
 720:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 724:	08 95       	ret
		case 6:
			MACRO_BAUDRATE(76800);
 726:	8b e0       	ldi	r24, 0x0B	; 11
 728:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 72c:	08 95       	ret
		case 7:
			MACRO_BAUDRATE(115200);
 72e:	87 e0       	ldi	r24, 0x07	; 7
 730:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 734:	08 95       	ret
		case 8:
			MACRO_BAUDRATE(230400);
 736:	83 e0       	ldi	r24, 0x03	; 3
 738:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 73c:	08 95       	ret
		case 9:
			MACRO_BAUDRATE(250000);
 73e:	83 e0       	ldi	r24, 0x03	; 3
 740:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 744:	08 95       	ret
		case 10:
			MACRO_BAUDRATE(500000);
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 74c:	08 95       	ret
		case 11:
			MACRO_BAUDRATE(1000000);
 74e:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 752:	08 95       	ret
		default:
			MACRO_BAUDRATE(115200);
 754:	87 e0       	ldi	r24, 0x07	; 7
 756:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 75a:	08 95       	ret

0000075c <try_receive_data>:
uint16_t citacka0, citacka1;

void try_receive_data(void)
{
	uint8_t j=0;
 	j = check_uart0();
 75c:	0e 94 1c 03 	call	0x638	; 0x638 <check_uart0>
	// Data byla pøijata
 	if (j == 1)
 760:	81 30       	cpi	r24, 0x01	; 1
 762:	09 f0       	breq	.+2      	; 0x766 <try_receive_data+0xa>
 764:	47 c0       	rjmp	.+142    	; 0x7f4 <try_receive_data+0x98>
	{
		// Naplní Buffer trinamic
		TB_buf_fill_In();
 766:	0e 94 82 00 	call	0x104	; 0x104 <TB_buf_fill_In>
		// Kontrola adresy, jestli je adresa schodná s adresou modulu
		if (TB_Buf_In.n.addr == TB_gbparam.address)
 76a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <TB_Buf_In>
 76e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TB_gbparam+0x2>
 772:	98 13       	cpse	r25, r24
 774:	3f c0       	rjmp	.+126    	; 0x7f4 <try_receive_data+0x98>
		{
			// Rozebrání pøíkazu
			switch (TB_Process())
 776:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <TB_Process>
 77a:	8e 30       	cpi	r24, 0x0E	; 14
 77c:	19 f0       	breq	.+6      	; 0x784 <try_receive_data+0x28>
 77e:	8f 30       	cpi	r24, 0x0F	; 15
 780:	e9 f0       	breq	.+58     	; 0x7bc <try_receive_data+0x60>
 782:	08 95       	ret
			{
				// Zde se vypisují pøíkazy uživatelské, které chceme implementovat
				case TB_CMD_SIO:
					switch(TB_Buf_In.b[TB_BUF_TYPE])
 784:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <TB_Buf_In+0x2>
 788:	41 11       	cpse	r20, r1
 78a:	12 c0       	rjmp	.+36     	; 0x7b0 <try_receive_data+0x54>
					{
						case 0:
							switch(TB_Buf_In.b[TB_BUF_MOTOR])
 78c:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <TB_Buf_In+0x3>
 790:	41 11       	cpse	r20, r1
 792:	07 c0       	rjmp	.+14     	; 0x7a2 <try_receive_data+0x46>
							{
								case 0:
									TB_SendAck(TB_ERR_OK, 0);
 794:	40 e0       	ldi	r20, 0x00	; 0
 796:	50 e0       	ldi	r21, 0x00	; 0
 798:	ba 01       	movw	r22, r20
 79a:	84 e6       	ldi	r24, 0x64	; 100
 79c:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
									break;
 7a0:	0d c0       	rjmp	.+26     	; 0x7bc <try_receive_data+0x60>
								default:
									TB_SendAck(TB_ERR_MOTOR, TB_Buf_In.b[TB_BUF_MOTOR]);
 7a2:	50 e0       	ldi	r21, 0x00	; 0
 7a4:	60 e0       	ldi	r22, 0x00	; 0
 7a6:	70 e0       	ldi	r23, 0x00	; 0
 7a8:	87 e0       	ldi	r24, 0x07	; 7
 7aa:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
									break;
 7ae:	06 c0       	rjmp	.+12     	; 0x7bc <try_receive_data+0x60>
							}
							break;
						default:
							TB_SendAck(TB_ERR_TYPE, TB_Buf_In.b[TB_BUF_TYPE]);
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	70 e0       	ldi	r23, 0x00	; 0
 7b6:	83 e0       	ldi	r24, 0x03	; 3
 7b8:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
							break;
					}
				case TB_CMD_GIO:
					switch(TB_Buf_In.b[TB_BUF_TYPE])
 7bc:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <TB_Buf_In+0x2>
 7c0:	41 11       	cpse	r20, r1
 7c2:	12 c0       	rjmp	.+36     	; 0x7e8 <try_receive_data+0x8c>
					{
						case 0:
							switch(TB_Buf_In.b[TB_BUF_MOTOR])
 7c4:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <TB_Buf_In+0x3>
 7c8:	41 11       	cpse	r20, r1
 7ca:	07 c0       	rjmp	.+14     	; 0x7da <try_receive_data+0x7e>
							{
								case 0:
									TB_SendAck(TB_ERR_OK, 0);
 7cc:	40 e0       	ldi	r20, 0x00	; 0
 7ce:	50 e0       	ldi	r21, 0x00	; 0
 7d0:	ba 01       	movw	r22, r20
 7d2:	84 e6       	ldi	r24, 0x64	; 100
 7d4:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
									break;
 7d8:	08 95       	ret
								default:
									TB_SendAck(TB_ERR_MOTOR, TB_Buf_In.b[TB_BUF_MOTOR]);
 7da:	50 e0       	ldi	r21, 0x00	; 0
 7dc:	60 e0       	ldi	r22, 0x00	; 0
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	87 e0       	ldi	r24, 0x07	; 7
 7e2:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
									break;
 7e6:	08 95       	ret
							}
							break;
						default:
							TB_SendAck(TB_ERR_TYPE, TB_Buf_In.b[TB_BUF_TYPE]);
 7e8:	50 e0       	ldi	r21, 0x00	; 0
 7ea:	60 e0       	ldi	r22, 0x00	; 0
 7ec:	70 e0       	ldi	r23, 0x00	; 0
 7ee:	83 e0       	ldi	r24, 0x03	; 3
 7f0:	0e 94 b9 00 	call	0x172	; 0x172 <TB_SendAck>
 7f4:	08 95       	ret

000007f6 <main>:


int main(void)
{
	// Musí být uložené do promìnné nejprve!! Jinak dochází k problému s nastavením UBRRL
	UB = UART0_DEFAULT_BAUD;
 7f6:	80 e8       	ldi	r24, 0x80	; 128
 7f8:	95 e2       	ldi	r25, 0x25	; 37
 7fa:	a0 e0       	ldi	r26, 0x00	; 0
 7fc:	b0 e0       	ldi	r27, 0x00	; 0
 7fe:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <UB>
 802:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <UB+0x1>
 806:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <UB+0x2>
 80a:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <UB+0x3>
	uart0_error = uart0_init(UB);
 80e:	60 e8       	ldi	r22, 0x80	; 128
 810:	75 e2       	ldi	r23, 0x25	; 37
 812:	80 e0       	ldi	r24, 0x00	; 0
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	0e 94 4d 02 	call	0x49a	; 0x49a <uart0_init>
 81a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <uart0_error>
	uart0_interrupt_rx(TRUE);
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	0e 94 8c 02 	call	0x518	; 0x518 <uart0_interrupt_rx>
	uart0_interrupt_tx(TRUE);
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	0e 94 9b 02 	call	0x536	; 0x536 <uart0_interrupt_tx>
	
	TB_Init();
 82a:	0e 94 22 02 	call	0x444	; 0x444 <TB_Init>
	
	Init_Board();
 82e:	0e 94 5e 00 	call	0xbc	; 0xbc <Init_Board>
	
	// Povolení globálního pøerušení
	sei();
 832:	78 94       	sei

	// Hlavní smyèka programu
	while (1) 
    {
		// Kontroluje pøíjem dat a rozhodovací logika pro odpovìï
		try_receive_data();
 834:	0e 94 ae 03 	call	0x75c	; 0x75c <try_receive_data>
		// Jednoduché nulování flagu pro pøíjem
		simple_flag_null();
 838:	0e 94 69 00 	call	0xd2	; 0xd2 <simple_flag_null>
		
    }
 83c:	fb cf       	rjmp	.-10     	; 0x834 <main+0x3e>

0000083e <__udivmodsi4>:
 83e:	a1 e2       	ldi	r26, 0x21	; 33
 840:	1a 2e       	mov	r1, r26
 842:	aa 1b       	sub	r26, r26
 844:	bb 1b       	sub	r27, r27
 846:	fd 01       	movw	r30, r26
 848:	0d c0       	rjmp	.+26     	; 0x864 <__udivmodsi4_ep>

0000084a <__udivmodsi4_loop>:
 84a:	aa 1f       	adc	r26, r26
 84c:	bb 1f       	adc	r27, r27
 84e:	ee 1f       	adc	r30, r30
 850:	ff 1f       	adc	r31, r31
 852:	a2 17       	cp	r26, r18
 854:	b3 07       	cpc	r27, r19
 856:	e4 07       	cpc	r30, r20
 858:	f5 07       	cpc	r31, r21
 85a:	20 f0       	brcs	.+8      	; 0x864 <__udivmodsi4_ep>
 85c:	a2 1b       	sub	r26, r18
 85e:	b3 0b       	sbc	r27, r19
 860:	e4 0b       	sbc	r30, r20
 862:	f5 0b       	sbc	r31, r21

00000864 <__udivmodsi4_ep>:
 864:	66 1f       	adc	r22, r22
 866:	77 1f       	adc	r23, r23
 868:	88 1f       	adc	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	1a 94       	dec	r1
 86e:	69 f7       	brne	.-38     	; 0x84a <__udivmodsi4_loop>
 870:	60 95       	com	r22
 872:	70 95       	com	r23
 874:	80 95       	com	r24
 876:	90 95       	com	r25
 878:	9b 01       	movw	r18, r22
 87a:	ac 01       	movw	r20, r24
 87c:	bd 01       	movw	r22, r26
 87e:	cf 01       	movw	r24, r30
 880:	08 95       	ret

00000882 <__tablejump2__>:
 882:	ee 0f       	add	r30, r30
 884:	ff 1f       	adc	r31, r31
 886:	05 90       	lpm	r0, Z+
 888:	f4 91       	lpm	r31, Z
 88a:	e0 2d       	mov	r30, r0
 88c:	09 94       	ijmp

0000088e <eeprom_read_block>:
 88e:	dc 01       	movw	r26, r24
 890:	cb 01       	movw	r24, r22

00000892 <eeprom_read_blraw>:
 892:	fc 01       	movw	r30, r24
 894:	f9 99       	sbic	0x1f, 1	; 31
 896:	fe cf       	rjmp	.-4      	; 0x894 <eeprom_read_blraw+0x2>
 898:	06 c0       	rjmp	.+12     	; 0x8a6 <eeprom_read_blraw+0x14>
 89a:	f2 bd       	out	0x22, r31	; 34
 89c:	e1 bd       	out	0x21, r30	; 33
 89e:	f8 9a       	sbi	0x1f, 0	; 31
 8a0:	31 96       	adiw	r30, 0x01	; 1
 8a2:	00 b4       	in	r0, 0x20	; 32
 8a4:	0d 92       	st	X+, r0
 8a6:	41 50       	subi	r20, 0x01	; 1
 8a8:	50 40       	sbci	r21, 0x00	; 0
 8aa:	b8 f7       	brcc	.-18     	; 0x89a <eeprom_read_blraw+0x8>
 8ac:	08 95       	ret

000008ae <eeprom_update_byte>:
 8ae:	26 2f       	mov	r18, r22

000008b0 <eeprom_update_r18>:
 8b0:	f9 99       	sbic	0x1f, 1	; 31
 8b2:	fe cf       	rjmp	.-4      	; 0x8b0 <eeprom_update_r18>
 8b4:	92 bd       	out	0x22, r25	; 34
 8b6:	81 bd       	out	0x21, r24	; 33
 8b8:	f8 9a       	sbi	0x1f, 0	; 31
 8ba:	01 97       	sbiw	r24, 0x01	; 1
 8bc:	00 b4       	in	r0, 0x20	; 32
 8be:	02 16       	cp	r0, r18
 8c0:	39 f0       	breq	.+14     	; 0x8d0 <eeprom_update_r18+0x20>
 8c2:	1f ba       	out	0x1f, r1	; 31
 8c4:	20 bd       	out	0x20, r18	; 32
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	f8 94       	cli
 8ca:	fa 9a       	sbi	0x1f, 2	; 31
 8cc:	f9 9a       	sbi	0x1f, 1	; 31
 8ce:	0f be       	out	0x3f, r0	; 63
 8d0:	08 95       	ret

000008d2 <eeprom_write_block>:
 8d2:	dc 01       	movw	r26, r24
 8d4:	cb 01       	movw	r24, r22
 8d6:	03 c0       	rjmp	.+6      	; 0x8de <eeprom_write_block+0xc>
 8d8:	2d 91       	ld	r18, X+
 8da:	0e 94 74 04 	call	0x8e8	; 0x8e8 <eeprom_write_r18>
 8de:	41 50       	subi	r20, 0x01	; 1
 8e0:	50 40       	sbci	r21, 0x00	; 0
 8e2:	d0 f7       	brcc	.-12     	; 0x8d8 <eeprom_write_block+0x6>
 8e4:	08 95       	ret

000008e6 <eeprom_write_byte>:
 8e6:	26 2f       	mov	r18, r22

000008e8 <eeprom_write_r18>:
 8e8:	f9 99       	sbic	0x1f, 1	; 31
 8ea:	fe cf       	rjmp	.-4      	; 0x8e8 <eeprom_write_r18>
 8ec:	1f ba       	out	0x1f, r1	; 31
 8ee:	92 bd       	out	0x22, r25	; 34
 8f0:	81 bd       	out	0x21, r24	; 33
 8f2:	20 bd       	out	0x20, r18	; 32
 8f4:	0f b6       	in	r0, 0x3f	; 63
 8f6:	f8 94       	cli
 8f8:	fa 9a       	sbi	0x1f, 2	; 31
 8fa:	f9 9a       	sbi	0x1f, 1	; 31
 8fc:	0f be       	out	0x3f, r0	; 63
 8fe:	01 96       	adiw	r24, 0x01	; 1
 900:	08 95       	ret

00000902 <_exit>:
 902:	f8 94       	cli

00000904 <__stop_program>:
 904:	ff cf       	rjmp	.-2      	; 0x904 <__stop_program>
